
// functions/src/news.js

/**
 * @fileoverview
 * This module contains all Cloud Functions related to the management of news articles.
 * Responsibilities include:
 * - Creating and deleting news articles.
 * - Generating and retrieving URLs for uploading/downloading cover images.
 * - A scheduled job to generate a JSON cache of all news for client-side performance.
 */

const { onCall, HttpsError } = require("firebase-functions/v2/https");
const { onSchedule } = require("firebase-functions/v2/scheduler");
const logger = require("firebase-functions/logger");
const admin = require("firebase-admin");

// Get instances of Firebase services. The Admin SDK is initialized in index.js.
const db = admin.firestore();
const bucket = admin.storage().bucket();

/**
 * Creates a new news article in Firestore after validating business rules.
 * - The caller must be an admin.
 * - The article slug must be unique.
 * - There is a global limit of 5 articles.
 * - An admin can only publish up to 2 articles per week.
 */
exports.createNewsArticle = onCall(
  { region: "europe-west1", appCheck: true },
  async (request) => {
    logger.info("[NEWS] 'createNewsArticle' function invoked.", {
      uid: request.auth?.uid,
    });

    if (!request.auth || !request.auth.token.admin) {
      throw new HttpsError(
        "permission-denied",
        "You must be an admin to publish news."
      );
    }

    const uid = request.auth.uid;
    const articleData = request.data;
    const slug = articleData.slug;

    if (!slug) {
      throw new HttpsError("invalid-argument", "Article slug is missing.");
    }

    const newsRef = db.collection("news");
    const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

    try {
      logger.info(`[NEWS] Performing pre-write checks for slug: ${slug}`);

      const existingDoc = await newsRef.doc(slug).get();
      if (existingDoc.exists) {
        throw new HttpsError(
          "already-exists",
          "An article with this English title (slug) already exists."
        );
      }

      const totalCountSnapshot = await newsRef.count().get();
      if (totalCountSnapshot.data().count >= 5) {
        throw new HttpsError(
          "resource-exhausted",
          "Article limit reached (5). Cannot publish more."
        );
      }

      const weeklyQuery = newsRef
        .where("authorUid", "==", uid)
        .where("publishedAt", ">=", oneWeekAgo);
      const weeklySnapshot = await weeklyQuery.get();
      if (weeklySnapshot.size >= 2) {
        throw new HttpsError(
          "resource-exhausted",
          "You have already published 2 articles this week."
        );
      }

      const finalArticleData = {
        ...articleData,
        authorUid: uid,
        publishedAt: admin.firestore.FieldValue.serverTimestamp(),
      };

      await newsRef.doc(slug).set(finalArticleData);
      logger.info(`[NEWS] Successfully created article with slug: ${slug}`);
      return { message: "Article published successfully!" };
    } catch (error) {
      if (error instanceof HttpsError) {
        throw error;
      }
      logger.error("[NEWS] Unexpected error creating news article:", error);
      throw new HttpsError(
        "internal",
        "Failed to save the article due to an internal error."
      );
    }
  }
);

/**
 * Deletes a news article from Firestore and its associated cover images from Cloud Storage.
 * - The caller must be an admin.
 * - It resiliently attempts to delete cover files, logging errors but not failing if a file is already gone.
 */
exports.deleteNewsArticle = onCall(
  { region: "europe-west1", appCheck: true },
  async (request) => {
    logger.info("[NEWS] 'deleteNewsArticle' function invoked.", {
      uid: request.auth?.uid,
    });

    if (!request.auth || !request.auth.token.admin) {
      throw new HttpsError(
        "permission-denied",
        "You must be an admin to delete news."
      );
    }

    const slug = request.data.slug;
    if (!slug) {
      throw new HttpsError("invalid-argument", "Article slug is missing.");
    }

    const docRef = db.collection("news").doc(slug);

    try {
      const docSnapshot = await docRef.get();
      if (!docSnapshot.exists) {
        logger.warn(
          `[NEWS] Article with slug '${slug}' not found for deletion.`
        );
        return { message: `Article "${slug}" was already deleted.` };
      }
      const coverMap = docSnapshot.data().cover;

      await docRef.delete();
      logger.info(`[NEWS] Deleted Firestore document: news/${slug}`);

      // If cover images exist, attempt to delete them from Storage.
      if (coverMap && typeof coverMap === "object") {
        const deletePromises = [];
        if (coverMap.tr) {
          deletePromises.push(
            bucket
              .file(coverMap.tr)
              .delete()
              .catch((e) =>
                logger.error(
                  `Failed to delete TR cover for ${slug}: ${coverMap.tr}`,
                  e
                )
              )
          );
        }
        if (coverMap.en) {
          deletePromises.push(
            bucket
              .file(coverMap.en)
              .delete()
              .catch((e) =>
                logger.error(
                  `Failed to delete EN cover for ${slug}: ${coverMap.en}`,
                  e
                )
              )
          );
        }
        await Promise.all(deletePromises);
        logger.info(
          `[NEWS] Attempted deletion of storage files for article: ${slug}`
        );
      }

      return { message: `Article "${slug}" and its files have been deleted.` };
    } catch (error) {
      logger.error(`[NEWS] Unexpected error deleting article ${slug}:`, error);
      throw new HttpsError(
        "internal",
        "Failed to delete the article due to an internal error."
      );
    }
  }
);

/**
 * Generates a secure, short-lived (5-minute) URL for an admin to upload a news cover image.
 */
exports.getCoverUploadUrl = onCall(
  { region: "europe-west1", appCheck: true },
  async (request) => {
    if (!request.auth || !request.auth.token.admin) {
      throw new HttpsError(
        "permission-denied",
        "You must be an admin to upload cover images."
      );
    }

    const { slug, fileName, contentType } = request.data;
    if (!slug || !fileName || !contentType) {
      throw new HttpsError(
        "invalid-argument",
        "Slug, file name, and content type are required."
      );
    }

    const filePath = `news/covers/${slug}/${Date.now()}-${fileName}`;
    const options = {
      version: "v4",
      action: "write",
      expires: Date.now() + 5 * 60 * 1000, // 5 minutes
      contentType: contentType,
    };

    try {
      const [url] = await bucket.file(filePath).getSignedUrl(options);
      logger.info(`[NEWS] Generated cover upload URL for: ${filePath}`);
      return { signedUrl: url, filePath: filePath };
    } catch (error) {
      logger.error(
        `[NEWS] Could not generate cover upload URL for ${filePath}`,
        error
      );
      throw new HttpsError(
        "internal",
        "Error preparing the cover upload link."
      );
    }
  }
);

/**
 * Generates a secure, short-lived (10-minute) URL to download an existing cover image.
 */
exports.getCoverDownloadUrl = onCall(
  { region: "europe-west1" },
  async (request) => {
    const { filePath } = request.data;
    if (!filePath) {
      throw new HttpsError("invalid-argument", "File path is required.");
    }

    const options = {
      version: "v4",
      action: "read",
      expires: Date.now() + 10 * 60 * 1000, // 10 minutes
    };

    try {
      const file = bucket.file(filePath);
      const [exists] = await file.exists();
      if (!exists) {
        throw new HttpsError(
          "not-found",
          "The requested cover image is not available."
        );
      }
      const [url] = await file.getSignedUrl(options);
      return { signedUrl: url };
    } catch (error) {
      if (error instanceof HttpsError) throw error;
      logger.error(
        `[NEWS] Could not generate download URL for ${filePath}`,
        error
      );
      throw new HttpsError("internal", "Error preparing the secure image link.");
    }
  }
);

/**
 * A scheduled function that runs daily to create a JSON cache of all news articles.
 * This improves client-side load times by allowing the app to fetch a single file
 * instead of querying Firestore.
 */
exports.generateNewsCache = onSchedule(
  {
    schedule: "0 0 * * *", // Daily at midnight
    timeZone: "Europe/Istanbul",
    region: "europe-west1",
    memory: "256MiB",
    timeoutSeconds: 120,
  },
  async (event) => {
    logger.log(`[NEWS_CACHE] Starting daily news cache job.`);
    try {
      const newsSnapshot = await db
        .collection("news")
        .orderBy("publishedAt", "desc")
        .get();

      if (newsSnapshot.empty) {
        logger.log("[NEWS_CACHE] No news articles found. Skipping cache generation.");
        return null;
      }

      const allNews = newsSnapshot.docs.map((doc) => {
        const data = doc.data();
        // Convert Firestore Timestamp to ISO string for JSON compatibility.
        if (data.publishedAt?.toDate) {
          data.publishedAt = data.publishedAt.toDate().toISOString();
        }
        return { id: doc.id, ...data };
      });

      const jsonContent = JSON.stringify(allNews);
      const filePath = "news/news.json";
      const file = bucket.file(filePath);

      await file.save(jsonContent, {
        metadata: {
          contentType: "application/json",
          // Set cache control for CDNs and browsers.
          cacheControl: "private, max-age=3600",
        },
      });

      logger.log(
        `[NEWS_CACHE] Successfully saved news cache to '${filePath}'. Total articles: ${allNews.length}.`
      );
    } catch (error) {
      logger.error("[NEWS_CACHE] Fatal error during cache generation:", error);
    }
    return null;
  }
);

/**
 * Returns a secure, short-lived (10-minute) URL to download the generated news cache file.
 */
exports.getNewsCacheUrl = onCall({ region: "europe-west1" }, async (_request) => {
  logger.info("[NEWS_CACHE] 'getNewsCacheUrl' function invoked.");

  const filePath = "news/news.json";
  const options = {
    version: "v4",
    action: "read",
    expires: Date.now() + 10 * 60 * 1000, // 10 minutes
  };

  try {
    const file = bucket.file(filePath);
    const [exists] = await file.exists();
    if (!exists) {
      throw new HttpsError(
        "not-found",
        "The news cache is not available at the moment."
      );
    }
    const [url] = await file.getSignedUrl(options);
    return { signedUrl: url };
  } catch (error) {
    if (error instanceof HttpsError) throw error;
    logger.error(
      `[NEWS_CACHE] Could not generate signed URL for ${filePath}`,
      error
    );
    throw new HttpsError(
      "internal",
      "An unexpected error occurred while fetching the news link."
    );
  }
});
